%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: JavaScriptU3D
file_extensions: js
scope: source.javaScriptU3D

variables:
  pos_integer: '[0-9]+'
  integer: '-?[0-9]+'
  numeric: '-?[0-9.]+'
  pos_numeric: '[0-9.]+'
  boolean: '(true|false)'
  
  class_name: '\b_?[A-Z][a-zA-Z]*[0-9]*\b'
  protection: '(public|protected|private|static)'

  var_name: '\b_?[a-z][a-zA-Z]*[0-9]*\b'
  basic_type: 'boolean|char|short|int|float|double'

  def_basic_type: '({{var_name}}):({{basic_type}})'
  def_class_type: '({{var_name}}):({{class_name}})'

  assign_boolean: '({{var_name}})\s?=\s?{{boolean}}'
  assign_numeric: '({{var_name}})\s?=\s?({{numeric}})'

  var_def_simple: '(var) ({{var_name}})(;)'
  var_def_numeric: '(var) {{assign_numeric}}'
  var_def_var: '(var) ({{var_name}})=({{var_name}});'
  var_def_string: '(var) ({{var_name}})=(")'
  var_def_basic_type: '(var) {{def_basic_type}};'
  var_def_boolean: '(var) ({{var_name}}):(boolean)=(true|false);'
  var_def_char: '(var) ({{var_name}}):(char)=(-?[0-9]{1,3});'
  var_def_integer: '(var) ({{var_name}}):(short|int)=({{integer}});'
  var_def_float: '(var) ({{var_name}}):(float|double)=({{numeric}});'
  var_def_class: '(var) ({{var_name}}):({{class_name}});'
  var_def_string_1: '(var) ({{var_name}}):(String)=(")'
  
  inc_numeric: '({{var_name}})\s?\+=\s?({{pos_numeric}})'
  inc: '({{var_name}})(\+\+)'
  dec_numeric: '({{var_name}})\s?\-=\s?({{pos_numeric}})'
  dec: '({{var_name}})(\-\-)'
  

  comparaison_numeric: '({{var_name}})\s?(<|>|<=|>=|!=)\s?({{numeric}})'
  comparaison_boolean: '({{var_name}})\s?(==|!=)\s?{{boolean}}'
  comparaison_null: '({{var_name}})\s?(==|!=)\s?(null)'

  function_name: '\b_?[a-zA-Z]*[0-9]*\b'
  constructor_name: '\b[A-Z][a-zA-Z_]*[0-9]*\b'

  def_function_name: 'Start|Awake|Update|OnGUI|GetComponent'

contexts:
  main:
    # Comments begin with a '//' and finish at the end of the line
    - match: '//'
      scope: punctuation.definition.comment.javaScriptU3D
      push: line_comment

    #var
    - match: '(^|\t){{var_def_simple}}'
      captures:
        2: keyword.control.javaScriptU3D
        3: variable.other.javaScriptU3D

    - match: '(^|\t){{var_def_numeric}};'
      captures:
        2: keyword.control.javaScriptU3D
        3: variable.other.javaScriptU3D
        4: constant.numeric.js

    - match: '(^|\t){{var_def_var}}'
      captures:
        2: keyword.control.javaScriptU3D
        3: variable.other.javaScriptU3D
        4: variable.other.javaScriptU3D

    - match: '(^|\t){{var_def_string}}'
      captures:
        2: keyword.control.javaScriptU3D
        3: variable.other.javaScriptU3D
        4: punctuation.definition.string.begin
      push: double_quoted_string

    - match: '(^|\t){{var_def_basic_type}}'
      captures:
        2: keyword.control.javaScriptU3D
        3: variable.other.javaScriptU3D
        4: support.class.basic_type.javaScriptU3D
    
    - match: '(^|\t){{var_def_boolean}}'
      captures:
        2: keyword.control.javaScriptU3D
        3: variable.other.javaScriptU3D
        4: support.class.basic_type.javaScriptU3D
        5: keyword.control.javaScriptU3D

    - match: '(^|\t){{var_def_char}}'
      captures:
        2: keyword.control.javaScriptU3D
        3: variable.other.javaScriptU3D
        4: support.class.basic_type.javaScriptU3D
        5: constant.numeric.js

    - match: '(^|\t){{var_def_integer}}'
      captures:
        2: keyword.control.javaScriptU3D
        3: variable.other.javaScriptU3D
        4: support.class.basic_type.javaScriptU3D
        5: constant.numeric.js

    - match: '(^|\t){{var_def_float}}'
      captures:
        2: keyword.control.javaScriptU3D
        3: variable.other.javaScriptU3D
        4: support.class.basic_type.javaScriptU3D
        5: constant.numeric.js

    - match: '(^|\t){{var_def_class}}'
      captures:
        2: keyword.control.javaScriptU3D
        3: variable.other.javaScriptU3D
        4: support.class.javaScriptU3D

    - match: '(^|\t){{var_def_string_1}}'
      captures:
        2: keyword.control.javaScriptU3D
        3: variable.other.javaScriptU3D
        4: support.class.string_type.javaScriptU3D
        5: punctuation.definition.string.begin
      push: double_quoted_string

    #protection def var
    - match: '(^|\t){{protection}}\s{{var_def_simple}}'
      captures:
        2: variable.language.javaScriptU3D
        3: keyword.control.javaScriptU3D
        4: variable.other.javaScriptU3D

    - match: '(^|\t){{protection}}\s{{var_def_boolean}}'
      captures:
        2: variable.language.javaScriptU3D
        3: keyword.control.javaScriptU3D
        4: variable.other.javaScriptU3D
        5: support.class.basic_type.javaScriptU3D
        6: constant.language.boolean.javaScriptU3D

    - match: '(^|\t){{protection}}\s{{var_def_integer}}'
      captures:
        2: variable.language.javaScriptU3D
        3: keyword.control.javaScriptU3D
        4: variable.other.javaScriptU3D
        5: support.class.javaScriptU3D
        6: constant.numeric.javaScriptU3D

    - match: '(^|\t){{protection}}\s{{var_def_class}}'
      captures:
        2: variable.language.javaScriptU3D
        3: keyword.control.javaScriptU3D
        4: variable.other.javaScriptU3D
        5: support.class.javaScriptU3D

    #assign var
    - match: '(^|\t){{assign_numeric}};'
      captures:
        2: variable.other.javaScriptU3D
        3: constant.numeric.javaScriptU3D

    - match: '(^|\t){{inc_numeric}};'
      captures:
        2: variable.other.javaScriptU3D
        3: constant.numeric.javaScriptU3D

    - match: '(^|\t){{inc}};'
      captures:
        2: variable.other.javaScriptU3D
        3: constant.numeric.javaScriptU3D

    - match: '(^|\t){{dec_numeric}};'
      captures:
        2: variable.other.javaScriptU3D
        3: constant.numeric.javaScriptU3D

    - match: '(^|\t){{dec}};'
      captures:
        2: variable.other.javaScriptU3D
        3: constant.numeric.javaScriptU3D   

    - match: '(^|\t){{assign_boolean}};'
      captures:
        2: variable.other.javaScriptU3D
        3: constant.language.boolean.javaScriptU3D

    - match: '(^|\t)({{var_name}})=({{var_name}});'
      captures:
        2: variable.other.javaScriptU3D
        3: variable.other.javaScriptU3D

    - match: '(^|\t)({{var_name}})=({{class_name}})\('
      captures:
        2: variable.other.javaScriptU3D
        3: support.class.javaScriptU3D
      set: function_use_param

    - match: '(^|\t)({{var_name}})\*=({{numeric}});'
      captures:
        2: variable.other.javaScriptU3D
        3: constant.numeric.js

    - match: '(^|\t)({{var_name}})/=({{numeric}});'
      captures:
        2: variable.other.javaScriptU3D
        3: constant.numeric.js

    - match: '(^|\t)({{var_name}})\+=({{var_name}});'
      captures:
        2: variable.other.javaScriptU3D
        3: constant.numeric.js

    - match: '(^|\t)({{var_name}})\-=({{var_name}});'
      captures:
        2: variable.other.javaScriptU3D
        3: variable.other.javaScriptU3D

    - match: '(^|\t)({{var_name}})\*=({{var_name}});'
      captures:
        2: variable.other.javaScriptU3D
        3: constant.numeric.js

    - match: '(^|\t)({{var_name}})/=({{var_name}});'
      captures:
        2: variable.other.javaScriptU3D
        3: constant.numeric.js

    - match: '(^|\t)({{var_name}})\s?=\s?({{var_name}}).({{function_name}})\('
      captures:
        2: variable.other.javaScriptU3D
        3: variable.other.javaScriptU3D
        4: entity.name.function.javaScriptU3D
      set: function_use_param

    #if
    - match: '(^|\t)(\}(else) )?(if)\(({{var_name}})\.'
      captures:
        3: keyword.control.javaScriptU3D
        5: variable.other.javaScriptU3D
        4: keyword.control.javaScriptU3D
      set: class_use_var

    - match: '(^|\t)(\}(else) )?(if)\(({{var_name}})\)'
      captures:
        3: keyword.control.javaScriptU3D
        5: variable.other.javaScriptU3D
        4: keyword.control.javaScriptU3D

    - match: '(^|\t)(if)\({{comparaison_numeric}}'
      captures:
        2: keyword.control.javaScriptU3D
        3: variable.other.javaScriptU3D
        5: constant.language.boolean.javaScriptU3D

    - match: '(^|\t)(if)\({{comparaison_boolean}}'
      captures:
        2: keyword.control.javaScriptU3D
        3: variable.other.javaScriptU3D
        5: constant.language.boolean.javaScriptU3D

    - match: '(^|\t)(if)\({{comparaison_null}}'
      captures:
        2: keyword.control.javaScriptU3D
        3: variable.other.javaScriptU3D
        5: constant.language.null.javaScriptU3D

    - match: '(^|\t)\}(else)\{'
      captures:
        2: keyword.control.javaScriptU3D

    #loop
    - match: '(^|\t)(break);'
      captures:
        2: keyword.control.javaScriptU3D

    #for
    - match: '(^|\t)(for)\('
      captures:
        2: keyword.control.javaScriptU3D
      set: for_first_assign

    #switch
    - match: '(^|\t)(switch)\(({{var_name}})\){'
      captures:
        2: keyword.control.javaScriptU3D
        3: variable.other.javaScriptU3D

    - match: '(^|\t)(case)\s({{integer}}):'
      captures:
        2: keyword.control.javaScriptU3D
        3: constant.numeric.javaScriptU3D

    - match: '(^|\t)(default):'
      captures:
        2: keyword.control.javaScriptU3D

    #function
    - match: '(^|\t)(function)\s({{function_name}})\('
      captures:
        2: variable.language.javaScriptU3D
        3: entity.name.function.js
      set: function_def_param

    - match: '(^|\t)({{function_name}})\.(<)({{class_name}})(>)\(\)\.'
      captures:
        2: entity.name.function.js
        4: support.class.javaScriptU3D
      set: class_use_var

    - match: '(^|\t)({{function_name}})\('
      captures:
        2: entity.name.function.js
      set: function_use_param

    #class
    - match: '(^|\t)(class) ({{class_name}}){'
      captures:
        3: support.class.javaScriptU3D

    - match: '(^|\t)(class)\s({{class_name}})\s(extends)\s({{class_name}}){'
      captures:
        2: keyword.control.javaScriptU3D
        3: variable.other.javaScriptU3D
        4: keyword.control.javaScriptU3D

    - match: '(^|\t){{protection}}\s(function)\s({{function_name}})\('
      captures:
        2: keyword.control.javaScriptU3D
        3: variable.language.javaScriptU3D
        4: entity.name.function.js
      set: function_def_param

    - match: '(^|\t)(function)\s({{constructor_name}})\('
      captures:
        2: support.function.javaScriptU3D
        3: support.class.javaScriptU3D
      set: constructor_def_param

    - match: '(^|\t)(super|this)\('
      captures:
        2: keyword.control.javaScriptU3D
      set: function_use_param

    - match: '(^|\t)({{var_name}})\.'
      captures:
        2: variable.other.javaScriptU3D
      set: class_use_var

  compar_var_right:
    - match: '\=\=\s?({{numeric}})'
      captures:
        1: constant.numeric.javaScriptU3D
      set: if_end

  if_end:
    - match: '\s?(&&|\|\|)\s?'
      scope: keyword.control.javaScriptU3D
      set:
        - match: '({{var_name}})\.'
          captures:
            1: variable.other.javaScriptU3D
          set: class_use_var

        - match: '({{var_name}})'
          captures:
            1: variable.other.javaScriptU3D
          set: compar_var_right

    - match: '\)'
      pop: true

  compar_var:
    - match: '({{var_name}})\s?(\=)\s?({{numeric}})'
      captures:
        1: variable.other.javaScriptU3D
        2: invalid.deprecated
        3: constant.numeric.javaScriptU3D
      pop: true

    - match: '({{var_name}})\s?\=\=\s?({{numeric}})'
      captures:
        1: variable.other.javaScriptU3D
        2: constant.numeric.javaScriptU3D
      set: if_end

    - match: '({{var_name}})\s?<\=?\s?({{numeric}})'
      captures:
        1: variable.other.javaScriptU3D
        2: constant.numeric.javaScriptU3D
      pop: true

    - match: '({{var_name}})\s?>\=?\s?({{numeric}})'
      captures:
        1: variable.other.javaScriptU3D
        2: constant.numeric.javaScriptU3D
      pop: true

  assign_var:
    - match: '{{assign_numeric}};'
      captures:
        1: variable.other.javaScriptU3D
        2: constant.numeric.javaScriptU3D
      pop: true

    - match: '{{inc_numeric}};'
      captures:
        1: variable.other.javaScriptU3D
        2: constant.numeric.javaScriptU3D
      pop: true

    - match: '{{inc}};'
      captures:
        1: variable.other.javaScriptU3D
        2: constant.numeric.javaScriptU3D
      pop: true

    - match: '{{dec_numeric}};'
      captures:
        1: variable.other.javaScriptU3D
        2: constant.numeric.javaScriptU3D
      pop: true

    - match: '{{dec}};'
      captures:
        1: variable.other.javaScriptU3D
        2: constant.numeric.javaScriptU3D
      pop: true  

    - match: '{{assign_boolean}};'
      captures:
        1: variable.other.javaScriptU3D
        2: constant.language.boolean.javaScriptU3D
      pop: true

    - match: '({{var_name}})=({{var_name}});'
      captures:
        1: variable.other.javaScriptU3D
        2: variable.other.javaScriptU3D
      pop: true

    - match: '({{var_name}})=({{class_name}})\('
      captures:
        1: variable.other.javaScriptU3D
        2: support.class.javaScriptU3D
      set: function_use_param

    - match: '({{var_name}})\*=({{numeric}});'
      captures:
        1: variable.other.javaScriptU3D
        2: constant.numeric.js
      pop: true

    - match: '({{var_name}})/=({{numeric}});'
      captures:
        1: variable.other.javaScriptU3D
        2: constant.numeric.js
      pop: true

    - match: '({{var_name}})\+=({{var_name}});'
      captures:
        1: variable.other.javaScriptU3D
        2: constant.numeric.js
      pop: true

    - match: '({{var_name}})\-=({{var_name}});'
      captures:
        1: variable.other.javaScriptU3D
        2: variable.other.javaScriptU3D
      pop: true

    - match: '({{var_name}})\*=({{var_name}});'
      captures:
        1: variable.other.javaScriptU3D
        2: constant.numeric.js
      pop: true

    - match: '({{var_name}})/=({{var_name}});'
      captures:
        1: variable.other.javaScriptU3D
        2: constant.numeric.js
      pop: true

    - match: '({{var_name}})\s?=\s?({{var_name}}).({{function_name}})\('
      captures:
        1: variable.other.javaScriptU3D
        2: variable.other.javaScriptU3D
        3: entity.name.function.javaScriptU3D
      set: function_use_param

  #function
  function_def_end:
    - match: '\)[;|{]'
      pop: true
    - match: '\):({{basic_type}})[;|{]'
      captures:
        1: support.class.javaScriptU3D
      pop: true
    - match: '\):({{class_name}})[;|{]'
      captures:
        1: support.class.javaScriptU3D
      pop: true

  function_def_comma:
    - match: ','
      set: function_def_param
    - include: function_def_end

  function_def_param:
    - match: '{{def_basic_type}}'
      captures:
        1: variable.other.javaScriptU3D
        2: support.class.basic_type.javaScriptU3D
      set: function_def_comma

    - match: '{{def_class_type}}'
      captures:
        1: variable.other.javaScriptU3D
        2: support.class.javaScriptU3D
      set: function_def_comma

    - match: '{{var_name}}'
      scope: variable.other.javaScriptU3D
      set: function_def_comma

    - include: function_def_end

  function_use_end:
    - match: '\)\.({{function_name}})\('
      captures:
        1: entity.name.function.js
      set: function_use_param
  
    - match: '\)\s?=\s?({{numeric}});'
      captures:
        1: constant.numeric.javaScriptU3D
      pop: true

    - match: '\);'
      pop: true

  function_use_comma:
    - match: ','
      set: function_use_param

    - include: function_use_end

  function_use_double_quoted_string:
    - match: '"|$'
      scope: punctuation.definition.string.end.javaScript
      pop: true
      set: function_use_comma
    - match: '\\.'
      scope: constant.character.escape.javaScript
    - match: '[^"\\]*'
      scope: string.quoted.double.javaScript

  function_use_param:
    - match: '({{var_name}})\.({{function_name}})\('
      captures:
        1: variable.other.javaScriptU3D
        2: entity.name.function.javaScriptU3D
      set: function_use_param

    - match: '({{var_name}})\.'
      captures: 
        1: variable.other.javaScriptU3D
      set: function_use_param

    - match: '{{var_name}}'
      scope: variable.other.javaScriptU3D
      set: function_use_comma

    - match: '{{numeric}}'
      scope: constant.numeric.js
      set: function_use_comma

    - match: '"'
      scope: punctuation.definition.string.begin
      push: function_use_double_quoted_string

    - include: function_use_end

  #class
  constructor_def_end:
    - match: '\)[;|{]'
      pop: true

  constructor_def_comma:
    - match: ','
      set: constructor_def_param
    - include: constructor_def_end

  constructor_def_param:
    - match: '{{def_basic_type}}'
      captures:
        1: variable.other.javaScriptU3D
        2: support.class.basic_type.javaScriptU3D
      set: constructor_def_comma

    - match: '{{def_class_type}}'
      captures:
        1: variable.other.javaScriptU3D
        2: support.class.javaScriptU3D
      set: constructor_def_comma

    - match: '{{var_name}}'
      scope: variable.other.javaScriptU3D
      set: constructor_def_comma

    - include: constructor_def_end

  class_use_var:
    - match: '({{function_name}})\.(<)({{class_name}})(>)\(\)\.'
      captures:
        1: entity.name.function.js
        3: support.class.javaScriptU3D
      set: class_use_var

    - match: '({{function_name}})\('
      captures: 
        1: entity.name.function.js
      set: function_use_param

    - match: '({{var_name}})\.'
      captures:
        1: variable.other.javaScriptU3D
      set: class_use_var

    - match: '({{var_name}})\)'
      captures:
        1: variable.other.javaScriptU3D
      pop: true

    - include: assign_var
    - include: compar_var

  #for
  for_second_assign:
    - match: '{{inc}}\){'
      captures:
        1: variable.other.javaScriptU3D
        2: constant.numeric.javaScriptU3D
      pop: true

  for_condition:
    - match: '{{comparaison_numeric}};'
      captures:
        1: variable.other.javaScriptU3D
        2: constant.numeric.javaScriptU3D
      set: for_second_assign

  for_first_assign:
    - match: '{{assign_numeric}};'
      captures:
        1: variable.other.javaScriptU3D
        2: constant.numeric.javaScriptU3D
      set: for_condition

  string_begin:
    - match: '"'
      scope: string.quoted.double.javaScriptU3D
      push: double_quoted_string

  double_quoted_string:
    - match: '[^"\\]*'
      scope: string.quoted.double.javaScript
    - match: '\\.'
      scope: constant.character.escape.javaScript
    - match: '"|$'
      scope: punctuation.definition.string.end.javaScript
      pop: true

  line_comment:
    - meta_scope: comment.line.javaScriptU3D
    - match: $
      pop: true